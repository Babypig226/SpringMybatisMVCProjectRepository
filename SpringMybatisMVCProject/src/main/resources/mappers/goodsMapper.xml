<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goodsMapper">
<sql id = "basecolumn">
	GOODS_NUM, USER_ID, GOODS_NAME, GOODS_PRICE, GOODS_CONTENT, GOODS_IMAGE, READ_COUNT, GOODS_REGISTER, IP_ADDR
</sql>
<select id="getWishList" parameterType="string" resultType="model.GoodsDTO">
	select <include refid="basecolumn"/>
	from goods 
	where goods_num in(select goods_num from wish where user_id = #{userId})
</select>
<update id = "goodsCartDown" parameterType="long">
	update cart set qty = qty - 1, total_price = (qty - 1) * goods_price
	where cart_num = #{cartNum}

</update>
<delete id="goodsCartRemove" parameterType="hashMap">
	delete from cart
	<where>
		<if test="cartNums != null">
			cart_num in
			<foreach collection="cartNums" item="cartNum" index = "index"
			open ="(" close = ")" separator=",">
				#{cartNum}			
			</foreach>
		</if>
	</where>
</delete>
<select id="getCartList" parameterType = "string" resultType = "model.CartDTO">
	select CART_NUM, GOODS_NUM, USER_ID, GOODS_NAME, GOODS_PRICE, GOODS_IMAGE, QTY, TOTAL_PRICE
	from cart
	<where>
		<if test = "value != null">
			user_id = #{userId}
		</if>
		<if test = "value == null">
			user_id is null
		</if>
	</where>
</select>
<update id="goodsCartAdd" parameterType="model.CartDTO">
<!-- or can use insert id and parameter Type and useGeneratedkeys = "false" -->
	merge into cart c1
	using (select goods_num from goods where goods_num = #{goodsNum})g
	on(c1.goods_num = g.goods_num and c1.user_id = #{userId})
	when matched then
		update set c1.qty = c1.qty + 1, total_price = (c1.qty + 1 )* c1.goods_price
	when not matched then
		insert(c1.CART_NUM, c1.GOODS_NUM, c1.USER_ID, c1.GOODS_NAME, c1.GOODS_PRICE, c1.GOODS_IMAGE, c1.QTY, c1.TOTAL_PRICE)
		values(num_seq.nextval, g.goods_num, #{userId}, #{goodsName}, #{goodsPrice}, #{goodsImage}, 1, #{goodsPrice})
</update>
<insert id="wishAdd" parameterType="model.WishDTO" useGeneratedKeys="false">
	merge into wish w
	using (select goods_num from goods where goods_num = #{goodsNum})g
	on(w.goods_num = g.goods_num and w.user_id = #{userId})
	when matched then
		update set w.ck = 1
		delete where (w.goods_num = #{goodsNum} and w.user_id = #{userId})
	when not matched then
		insert(w.goods_num, w.user_id)
		values(#{goodsNum}, #{userId})
</insert>
<select id = "wishCount" parameterType = "model.WishDTO" resultType = "int">
	select count(*) from wish 
	where goods_num = #{goodsNum} and user_id = #{userId} 
</select>
<insert id="goodsInsert" parameterType="model.GoodsDTO">
	insert into goods(<include refid = "basecolumn"/>) 
	values(#{goodsNum}, #{userId}, #{goodsName}, #{goodsPrice}, #{goodsContent},
	#{goodsImage}, 0, sysdate, #{ipAddr})
</insert>
<select id="getGoodsList" parameterType="model.GoodsDTO" resultType="model.GoodsDTO">
	select *
		from(select rownum rn, <include refid = "basecolumn"/>	
			from(select <include refid = "basecolumn"/> 
				from goods
				<trim prefix="where" prefixOverrides="AND|OR">
					<if test="goodsNum != null">
						goods_num = #{goodsNum}
					</if>
					<if test="userId != null">
						and user_id = #{userId}
					</if>
				</trim>
				order by goods_register desc))
		<where>
			<if test="startEndPageDTO != null">
				rn between #{startEndPageDTO.startPage} and #{startEndPageDTO.endPage} 
			</if>
		</where>
</select>
<select id="getGoodsCount" resultType="int">
	select count(*) from goods
</select>
<delete id="goodsDelete" parameterType="model.GoodsDTO">
	delete from goods
	where user_id = #{userId} and goods_num = #{goodsNum}
</delete>
</mapper>